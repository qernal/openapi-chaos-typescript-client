/* tslint:disable */
/* eslint-disable */
/**
 * Chaos
 * Central Management API - publicly exposed set of APIs for managing deployments
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qernal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestResponse,
  DeletedResponse,
  GetOrganisationsPageParameter,
  ListProjectResponse,
  NotFoundResponse,
  ProjectBody,
  ProjectResponse,
  UnauthorisedResponse,
} from '../models';
import {
    BadRequestResponseFromJSON,
    BadRequestResponseToJSON,
    DeletedResponseFromJSON,
    DeletedResponseToJSON,
    GetOrganisationsPageParameterFromJSON,
    GetOrganisationsPageParameterToJSON,
    ListProjectResponseFromJSON,
    ListProjectResponseToJSON,
    NotFoundResponseFromJSON,
    NotFoundResponseToJSON,
    ProjectBodyFromJSON,
    ProjectBodyToJSON,
    ProjectResponseFromJSON,
    ProjectResponseToJSON,
    UnauthorisedResponseFromJSON,
    UnauthorisedResponseToJSON,
} from '../models';

export interface DeleteProjectsProjectIdRequest {
    projectId: string;
}

export interface GetOrganisationsOrgIdProjectsRequest {
    organisationId: string;
    page?: GetOrganisationsPageParameter;
}

export interface GetProjectsRequest {
    page?: GetOrganisationsPageParameter;
}

export interface GetProjectsProjectIdRequest {
    projectId: string;
}

export interface PostProjectsRequest {
    projectBody?: ProjectBody;
}

export interface PutProjectsProjectIdRequest {
    projectId: string;
    projectBody?: ProjectBody;
}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI {

    /**
     * Delete project, this will also delete all the resources within the project
     * Delete project
     */
    async deleteProjectsProjectIdRaw(requestParameters: DeleteProjectsProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteProjectsProjectId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedResponseFromJSON(jsonValue));
    }

    /**
     * Delete project, this will also delete all the resources within the project
     * Delete project
     */
    async deleteProjectsProjectId(requestParameters: DeleteProjectsProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedResponse> {
        const response = await this.deleteProjectsProjectIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all the projects linked to a specific organisation
     * Get all projects within an organisation
     */
    async getOrganisationsOrgIdProjectsRaw(requestParameters: GetOrganisationsOrgIdProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListProjectResponse>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling getOrganisationsOrgIdProjects.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{organisation_id}/projects`.replace(`{${"organisation_id"}}`, encodeURIComponent(String(requestParameters.organisationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListProjectResponseFromJSON(jsonValue));
    }

    /**
     * Get all the projects linked to a specific organisation
     * Get all projects within an organisation
     */
    async getOrganisationsOrgIdProjects(requestParameters: GetOrganisationsOrgIdProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListProjectResponse> {
        const response = await this.getOrganisationsOrgIdProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all projects for this user, paginated
     * List projects
     */
    async getProjectsRaw(requestParameters: GetProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListProjectResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListProjectResponseFromJSON(jsonValue));
    }

    /**
     * Get all projects for this user, paginated
     * List projects
     */
    async getProjects(requestParameters: GetProjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListProjectResponse> {
        const response = await this.getProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific project
     * Get project
     */
    async getProjectsProjectIdRaw(requestParameters: GetProjectsProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectsProjectId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific project
     * Get project
     */
    async getProjectsProjectId(requestParameters: GetProjectsProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.getProjectsProjectIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new project
     * Create project
     */
    async postProjectsRaw(requestParameters: PostProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectBodyToJSON(requestParameters.projectBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * Create a new project
     * Create project
     */
    async postProjects(requestParameters: PostProjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.postProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update project
     * Update project
     */
    async putProjectsProjectIdRaw(requestParameters: PutProjectsProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling putProjectsProjectId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectBodyToJSON(requestParameters.projectBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * Update project
     * Update project
     */
    async putProjectsProjectId(requestParameters: PutProjectsProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.putProjectsProjectIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
