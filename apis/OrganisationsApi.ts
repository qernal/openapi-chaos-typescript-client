/* tslint:disable */
/* eslint-disable */
/**
 * Chaos
 * Central Management API - publicly exposed set of APIs for managing deployments
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qernal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestResponse,
  DeletedResponse,
  GetOrganisationsPageParameter,
  ListOrganisationResponse,
  NotFoundResponse,
  OrganisationBody,
  OrganisationResponse,
  UnauthorisedResponse,
} from '../models';
import {
    BadRequestResponseFromJSON,
    BadRequestResponseToJSON,
    DeletedResponseFromJSON,
    DeletedResponseToJSON,
    GetOrganisationsPageParameterFromJSON,
    GetOrganisationsPageParameterToJSON,
    ListOrganisationResponseFromJSON,
    ListOrganisationResponseToJSON,
    NotFoundResponseFromJSON,
    NotFoundResponseToJSON,
    OrganisationBodyFromJSON,
    OrganisationBodyToJSON,
    OrganisationResponseFromJSON,
    OrganisationResponseToJSON,
    UnauthorisedResponseFromJSON,
    UnauthorisedResponseToJSON,
} from '../models';

export interface DeleteOrganisationsOrgIdRequest {
    organisationId: string;
}

export interface GetOrganisationsRequest {
    page?: GetOrganisationsPageParameter;
}

export interface GetOrganisationsOrgIdRequest {
    organisationId: string;
}

export interface PostOrganisationsRequest {
    organisationBody?: OrganisationBody;
}

export interface PutOrganisationsOrgIdRequest {
    organisationId: string;
    organisationBody?: OrganisationBody;
}

/**
 * 
 */
export class OrganisationsApi extends runtime.BaseAPI {

    /**
     * Delete organisation, this will also delete all the resources within the organisation
     * Delete an organisation
     */
    async deleteOrganisationsOrgIdRaw(requestParameters: DeleteOrganisationsOrgIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedResponse>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling deleteOrganisationsOrgId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{organisation_id}`.replace(`{${"organisation_id"}}`, encodeURIComponent(String(requestParameters.organisationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedResponseFromJSON(jsonValue));
    }

    /**
     * Delete organisation, this will also delete all the resources within the organisation
     * Delete an organisation
     */
    async deleteOrganisationsOrgId(requestParameters: DeleteOrganisationsOrgIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedResponse> {
        const response = await this.deleteOrganisationsOrgIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List organisations
     * List organisations
     */
    async getOrganisationsRaw(requestParameters: GetOrganisationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOrganisationResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOrganisationResponseFromJSON(jsonValue));
    }

    /**
     * List organisations
     * List organisations
     */
    async getOrganisations(requestParameters: GetOrganisationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOrganisationResponse> {
        const response = await this.getOrganisationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single organisation
     * Get an organisation
     */
    async getOrganisationsOrgIdRaw(requestParameters: GetOrganisationsOrgIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponse>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling getOrganisationsOrgId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{organisation_id}`.replace(`{${"organisation_id"}}`, encodeURIComponent(String(requestParameters.organisationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationResponseFromJSON(jsonValue));
    }

    /**
     * Get a single organisation
     * Get an organisation
     */
    async getOrganisationsOrgId(requestParameters: GetOrganisationsOrgIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponse> {
        const response = await this.getOrganisationsOrgIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an organisation
     * Create organisations
     */
    async postOrganisationsRaw(requestParameters: PostOrganisationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationBodyToJSON(requestParameters.organisationBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationResponseFromJSON(jsonValue));
    }

    /**
     * Create an organisation
     * Create organisations
     */
    async postOrganisations(requestParameters: PostOrganisationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponse> {
        const response = await this.postOrganisationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an organisation
     * Update an organisation
     */
    async putOrganisationsOrgIdRaw(requestParameters: PutOrganisationsOrgIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponse>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling putOrganisationsOrgId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisations/{organisation_id}`.replace(`{${"organisation_id"}}`, encodeURIComponent(String(requestParameters.organisationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationBodyToJSON(requestParameters.organisationBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationResponseFromJSON(jsonValue));
    }

    /**
     * Update an organisation
     * Update an organisation
     */
    async putOrganisationsOrgId(requestParameters: PutOrganisationsOrgIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponse> {
        const response = await this.putOrganisationsOrgIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
